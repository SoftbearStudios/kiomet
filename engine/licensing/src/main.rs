// SPDX-FileCopyrightText: 2023 Softbear, Inc.
// SPDX-License-Identifier: AGPL-3.0-or-later

use serde::Deserialize;
use std::collections::{BTreeMap, BTreeSet};
use std::env::args;
use std::process::Command;
use structopt::StructOpt;

#[derive(Debug, StructOpt)]
#[structopt(name = "example", about = "An example of StructOpt usage.")]
struct Options {
    /// Binaries to aggregate licenses from.
    #[structopt(long = "binary")]
    binaries: Vec<String>,
    #[structopt(long)]
    format: String,
}

fn main() {
    let options: Options = Options::from_args();

    let mut dependencies = BTreeMap::<String, BTreeSet<String>>::new();

    #[derive(Deserialize)]
    struct LicenseInfo {
        name: String,
        authors: Option<String>,
        license: Option<String>,
    }

    for license_info in options.binaries.into_iter().flat_map(|binary| {
        let output = Command::new("cargo")
            .arg("license")
            .arg("--json")
            .args(["--current-dir", &binary])
            .output()
            .expect(&binary);

        assert!(output.status.success());

        serde_json::from_slice::<Vec<LicenseInfo>>(&output.stdout).expect(&binary)
    }) {
        if license_info.name.contains("windows")
            || license_info.name.contains("winapi")
            || license_info
                .authors
                .map(|authors| authors.contains("Softbear"))
                .unwrap_or(false)
        {
            continue;
        }
        if let Some(license) = license_info.license {
            dependencies
                .entry(license)
                .or_default()
                .insert(license_info.name);
        }
    }

    match options.format.as_str() {
        "html" => {
            for (license, names) in dependencies {
                println!("<h2>{{\"{license}\"}}</h2>");
                println!("<ul>");
                for name in names {
                    println!("    <li>{{\"{name}\"}}</li>");
                }
                println!("</ul>");
            }
        }
        "rust" => {
            println!(
                "/// Generated by `{}`",
                args().collect::<Vec<_>>().join(" ")
            );
            println!("pub const LICENSES: &'static [(&'static str, &'static [&'static str])] = &[");
            for (license, names) in dependencies {
                println!("    (\"{license}\", &[");
                for name in names {
                    println!("        \"{name}\",");
                }
                println!("    ]),");
            }
            println!("];");
        }
        _ => unreachable!("unsupported format"),
    }
}
